--- conf.h.orig	2013-01-20 12:39:23.315051693 +0100
+++ conf.h	2013-01-20 14:41:13.248477005 +0100
@@ -23,9 +23,6 @@
 static const Bool topbar        = True; /* False means bottom bar */
 static const char clock_fmt[] = "%a %I:%M %p"; /* Clock format on the bar */
 
-#define CURSOR_WAITKEY XC_icon /* X Font cursor theme for command mode
-			        * see http://tronche.com/gui/x/xlib/appendix/b/ */
-static const Bool waitkey    = 1; /* 1 the cursor should change into a square when waiting for a key. */
 static const Bool banishhook    = 0; /* 1 the banish command will be executed, when the prefix key is pressed */
 static const Bool clicktofocus = 0; /* 1 Change focus only on click */
 
@@ -62,14 +59,13 @@
 static const Bool resizehints = False; /* True means respect size hints in tiled resizals */
 
 /* key definitions */
-#define PREFIX_MODKEY ControlMask /* modifier prefix */
-#define PREFIX_KEYSYM XK_t  /* prefix key */
+#define MODKEY Mod1Mask
 
 #define TAGKEYS(KEY,TAG) \
-	{ None,                       KEY,      view,           {.ui = 1 << TAG} }, \
-	{ ControlMask,                KEY,      toggleview,     {.ui = 1 << TAG} }, \
-	{ ShiftMask,                  KEY,      tag,            {.ui = 1 << TAG} }, \
-	{ ControlMask | ShiftMask,    KEY,      toggletag,      {.ui = 1 << TAG} },
+    { MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
+    { MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
+    { MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
+    { MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
 
 /* helper for spawning shell commands in the pre dwm-5.0 fashion */
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
@@ -96,47 +92,47 @@
 /* KEY BINDINGS */
 static Key keys[] = {
 	/* modifier                   key        function        argument */
-	{ None,                       XK_d,      spawn,          {.v = dmenucmd } },
-	{ None,                       XK_c,      spawn,          {.v = termcmd } },
-        { None,                       XK_e,      spawn,          {.v = emacscmd } },
-	{ None,                       XK_w,      spawn,          {.v = conkeror } },
-	{ ShiftMask,                  XK_b,      togglebar,      {0} },
-	{ None,                       XK_b,      banish,         {0} },
-	{ None,                       XK_n,      focusstack,     {.i = +1 } },
-	{ None,                       XK_p,      focusstack,     {.i = -1 } },
-	{ None,                       XK_Tab,    view,           {0} },
-	{ None,                       XK_k,      killclient,     {0} },
-	{ None,                       XK_f,      togglefloating, {0} },
-	{ None,                       XK_0,      view,           {.ui = ~0 } },
-	{ ShiftMask,                  XK_0,      tag,            {.ui = ~0 } },
-	{ None,                       XK_comma,  focusmon,       {.i = -1 } },
-	{ None,                       XK_period, focusmon,       {.i = +1 } },
-	{ ShiftMask,                  XK_comma,  tagmon,         {.i = -1 } },
-	{ ShiftMask,                  XK_period, tagmon,         {.i = +1 } },
-	{ None,                       XK_1,      focusvisible,   {.i = 0 } },
-	{ None,                       XK_2,      focusvisible,   {.i = 1 } },
-	{ None,                       XK_3,      focusvisible,   {.i = 2 } },
-	{ None,                       XK_4,      focusvisible,   {.i = 3 } },
-        { None,                       XK_5,      focusvisible,   {.i = 4 } },
-        { None,                       XK_6,      focusvisible,   {.i = 5 } },
-        { None,                       XK_7,      focusvisible,   {.i = 6 } },
-        { None,                       XK_8,      focusvisible,   {.i = 7 } },
-        { None,                       XK_9,      focusvisible,   {.i = 8 } },
-	TAGKEYS(                        XK_F1,                      0)
-	TAGKEYS(                        XK_F2,                      1)
-	TAGKEYS(                        XK_F3,                      2)
-	TAGKEYS(                        XK_F4,                      3)
-	{ ShiftMask,                  XK_q,      quit,           {0} },
-	{ None,                       XK_q,      restart,        {0} },
+	{ MODKEY,                     XK_d,      spawn,          {.v = dmenucmd } },
+	{ MODKEY,                     XK_c,      spawn,          {.v = termcmd } },
+        { MODKEY,                     XK_e,      spawn,          {.v = emacscmd } },
+	{ MODKEY,                     XK_w,      spawn,          {.v = conkeror } },
+	{ MODKEY|ShiftMask,           XK_b,      togglebar,      {0} },
+	{ MODKEY,                     XK_b,      banish,         {0} },
+	{ MODKEY,                     XK_n,      focusstack,     {.i = +1 } },
+	{ MODKEY,                     XK_p,      focusstack,     {.i = -1 } },
+	{ MODKEY,                     XK_Tab,    view,           {0} },
+	{ MODKEY,                     XK_k,      killclient,     {0} },
+	{ MODKEY,                     XK_f,      togglefloating, {0} },
+	{ MODKEY,                     XK_0,      view,           {.ui = ~0 } },
+	{ MODKEY|ShiftMask,           XK_0,      tag,            {.ui = ~0 } },
+	{ MODKEY,                     XK_comma,  focusmon,       {.i = -1 } },
+	{ MODKEY,                     XK_period, focusmon,       {.i = +1 } },
+	{ MODKEY|ShiftMask,           XK_comma,  tagmon,         {.i = -1 } },
+	{ MODKEY|ShiftMask,           XK_period, tagmon,         {.i = +1 } },
+	{ MODKEY,                     XK_1,      focusvisible,   {.i = 0 } },
+	{ MODKEY,                     XK_2,      focusvisible,   {.i = 1 } },
+	{ MODKEY,                     XK_3,      focusvisible,   {.i = 2 } },
+	{ MODKEY,                     XK_4,      focusvisible,   {.i = 3 } },
+        { MODKEY,                     XK_5,      focusvisible,   {.i = 4 } },
+        { MODKEY,                     XK_6,      focusvisible,   {.i = 5 } },
+        { MODKEY,                     XK_7,      focusvisible,   {.i = 6 } },
+        { MODKEY,                     XK_8,      focusvisible,   {.i = 7 } },
+        { MODKEY,                     XK_9,      focusvisible,   {.i = 8 } },
+	TAGKEYS(                       XK_F1,                      0)
+	TAGKEYS(                       XK_F2,                      1)
+	TAGKEYS(                       XK_F3,                      2)
+	TAGKEYS(                       XK_F4,                      3)
+	{ MODKEY|ShiftMask,           XK_q,      quit,           {0} },
+	{ MODKEY,                     XK_q,      restart,        {0} },
 };
 
 /* button definitions */
 /* click can be ClkStatusText, ClkClientWin, or ClkRootWin */
 static Button buttons[] = {
 	/* click                event mask      button          function        argument */
-	{ ClkClientWin,         ControlMask,    Button1,        movemouse,      {0} },
-	{ ClkClientWin,         ControlMask,    Button2,        togglefloating, {0} },
-	{ ClkClientWin,         ControlMask,    Button3,        resizemouse,    {0} },
+	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
+	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
+	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
         { ClkTagBar,            0,              Button1,        view,           {0} },
         { ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
 };


--- swm.c.orig	2013-01-20 12:25:56.235950381 +0100
+++ swm.c	2013-01-20 14:42:07.638188144 +0100
@@ -79,8 +79,7 @@
 #define XEMBED_EMBEDDED_VERSION (VERSION_MAJOR << 16) | VERSION_MINOR
 
 /* enums */
-enum { PrefixKey, CmdKey };                                  /* prefix key */
-enum { CurNormal, CurResize, CurMove, CurCmd, CurLast };     /* cursor */
+enum { CurNormal, CurResize, CurMove, CurLast };              /* cursor */
 enum { ColBorder, ColFG, ColBG, ColLast };                   /* color */
 enum { ClkTagBar, ClkStatusText, ClkClientWin, ClkRootWin, ClkLast };       /* clicks */
 
@@ -247,9 +246,8 @@
 static long getstate(Window w);
 static unsigned int getsystraywidth();
 static Bool gettextprop(Window w, Atom atom, char *text, unsigned int size);
-static void grab_pointer(void);
 static void grabbuttons(Client *c, Bool focused);
-static void grabkeys(int keytype);
+static void grabkeys(void);
 static void initfont(const char *fontstr);
 static void keypress(XEvent *e);
 static void killclient(const Arg *arg);
@@ -1197,13 +1195,6 @@
 }
 
 void
-grab_pointer() {
-    XGrabPointer (display, root, True, 0,
-		  GrabModeAsync, GrabModeAsync,
-		  None, cursor[CurCmd], CurrentTime);
-}
-
-void
 grabbuttons(Client *c, Bool focused) {
     updatenumlockmask();
     {
@@ -1226,38 +1217,19 @@
 }
 
 void
-grabkeys(int keytype) {
-    unsigned int i;
-    unsigned int modifiers[] = {
-        0,
-        LockMask,
-        numlockmask,
-	LockMask | numlockmask
-    };
-    KeyCode code;
-
-    if(keytype == CmdKey) {
-	XGrabKey(display, AnyKey, AnyModifier, root, True, GrabModeAsync,
-		 GrabModeAsync);
+grabkeys(void) {
+    updatenumlockmask();
+    {
+	unsigned int i, j;
+	unsigned int modifiers[] = { 0, LockMask, numlockmask, numlockmask|LockMask };
+	KeyCode code;
 
-        if (waitkey) {
-	    grab_pointer();
-	}
-    }
-    else {
 	XUngrabKey(display, AnyKey, AnyModifier, root);
-
-        if(banishhook) {
-	    XWarpPointer(display, None, root, 0, 0, 0, 0, screen_w, screen_h);
-        }
-
-        if((code = XKeysymToKeycode(display, PREFIX_KEYSYM)))
-	    for(i = 0; i < LENGTH(modifiers); i++)
-		XGrabKey(display, code, PREFIX_MODKEY | modifiers[i],
-			 root, True, GrabModeAsync,
-			 GrabModeAsync);
-
-	XUngrabPointer(display, CurrentTime);
+	for(i = 0; i < LENGTH(keys); i++)
+	    if((code = XKeysymToKeycode(display, keys[i].keysym)))
+		for(j = 0; j < LENGTH(modifiers); j++)
+		    XGrabKey(display, code, keys[i].mod | modifiers[j], root,
+			     True, GrabModeAsync, GrabModeAsync);
     }
 }
 
@@ -1288,25 +1260,14 @@
     unsigned int i;
     KeySym keysym;
     XKeyEvent *ev;
-    static int prefixset = 0;
 
     ev = &e->xkey;
-    keysym = XkbKeycodeToKeysym(display, (KeyCode)e->xkey.keycode, 0, 0);
-
-    if(!prefixset && keysym == PREFIX_KEYSYM
-       && CLEANMASK(ev->state) == PREFIX_MODKEY) {
-	prefixset = 1;
-	grabkeys(CmdKey);
-    }
-    else {
-	for(i = 0; i < LENGTH(keys); i++)
-	    if(keysym == keys[i].keysym
-	       && CLEANMASK(ev->state) == keys[i].mod && keys[i].func)
-		keys[i].func(&(keys[i].arg));
-
-	prefixset = 0;
-	grabkeys(PrefixKey);
-    }
+    keysym = XkbKeycodeToKeysym(display, (KeyCode)ev->keycode, 0, 0);
+    for(i = 0; i < LENGTH(keys); i++)
+	if(keysym == keys[i].keysym
+	   && CLEANMASK(keys[i].mod) == CLEANMASK(ev->state)
+	   && keys[i].func)
+	    keys[i].func(&(keys[i].arg));
 }
 
 void
@@ -1398,7 +1359,7 @@
     XRefreshKeyboardMapping(ev);
     if(ev->request == MappingKeyboard) {
 	updatenumlockmask();
-	grabkeys(PrefixKey);
+	grabkeys();
     }
 }
 
@@ -1916,7 +1877,6 @@
     cursor[CurNormal] = XCreateFontCursor(display, XC_left_ptr);
     cursor[CurResize] = XCreateFontCursor(display, XC_sizing);
     cursor[CurMove] = XCreateFontCursor(display, XC_fleur);
-    cursor[CurCmd] = XCreateFontCursor(display, CURSOR_WAITKEY);
     /* init appearance */
     for(int i=0; i<NUMCOLORS; i++) {
 	dc.colors[i][ColBorder] = getcolor( colors[i][ColBorder] );
@@ -1948,7 +1908,7 @@
     XChangeWindowAttributes(display, root, CWEventMask|CWCursor, &wa);
     XSelectInput(display, root, wa.event_mask);
     updatenumlockmask();
-    grabkeys(PrefixKey);
+    grabkeys();
 }
 
 void
